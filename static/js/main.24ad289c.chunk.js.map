{"version":3,"sources":["components/Modal/Modal.js","components/Backdrop/Backdrop.js","components/List/List.js","App.js","registerServiceWorker.js","index.js"],"names":["animationTiming","enter","exit","modal","props","react_default","a","createElement","CSSTransition_default","mountOnEnter","unmountOnExit","in","show","timeout","classNames","enterActive","exitActive","className","onClick","closed","backdrop","cssClasses","join","List","state","items","addItemHandler","_this","setState","prevState","concat","length","removeItemHandler","selIndex","filter","item","index","_this2","this","listItems","map","key","TransitionGroup_default","component","Component","App","modalIsOpen","showBlock","showModal","closeModal","Transition_default","onEnter","console","log","onEntering","onEntered","onExit","onExiting","onExited","style","backgroundColor","width","height","margin","transition","opactiy","Modal_Modal","Backdrop_Backdrop","components_List_List","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.24ad289c.chunk.js","sourcesContent":["import React from 'react'\nimport CSSTransition from 'react-transition-group/CSSTransition'\n\nimport './Modal.css'\n\nconst animationTiming = {\n    enter: 400,\n    exit: 1000,\n}\n\nconst modal = (props) => {\n    \n    return (\n        <CSSTransition\n            mountOnEnter\n            unmountOnExit\n            in={props.show}\n            timeout={animationTiming}\n            classNames={{\n                enter: '',\n                enterActive: 'ModalOpen',\n                exit: '',\n                exitActive: 'ModalClosed'\n            }}>\n                <div className='Modal'>\n                    <h1>A Modal</h1>\n                    <button className=\"Button\" onClick={props.closed}>\n                        Dismiss\n                    </button>\n                </div>\n        </CSSTransition>\n    )\n}\n\nexport default modal","import React from 'react'\n\nimport './Backdrop.css'\n\nconst backdrop = (props) => {\n\n    const cssClasses = ['Backdrop', props.show ? 'BackdropOpen' : 'BackdropClosed']\n\n    return <div className={cssClasses.join(' ')}></div>\n}\n\nexport default backdrop","import React, { Component } from 'react'\nimport TransitionGroup from 'react-transition-group/TransitionGroup'\nimport CSSTransition from 'react-transition-group/CSSTransition'\n\nimport './List.css';\n\nclass List extends Component {\n    state = {\n        items: [1, 2, 3]\n    }\n\n    addItemHandler = () => {\n        this.setState((prevState) => {\n            return {\n                items: prevState.items.concat(prevState.items.length + 1)\n            };\n        });\n    }\n\n    removeItemHandler = (selIndex) => {\n        this.setState((prevState) => {\n            return {\n                items: prevState.items.filter((item, index) => index !== selIndex)\n            };\n        });\n    }\n\n    render () {\n        const listItems = this.state.items.map( (item, index) => (\n            <CSSTransition\n                key={index}\n                classNames='fade'\n                timeout={300}>\n                <li\n                    className=\"ListItem\" \n                    onClick={() => this.removeItemHandler(index)}>\n                    {item}\n                </li>\n            </CSSTransition>\n        ) )\n\n        return (\n            <div>\n                <button className=\"Button\" onClick={this.addItemHandler}>Add Item</button>\n                <p>Click Item to Remove.</p>\n                <TransitionGroup\n                    component='ul'\n                    className='List'>\n                    {listItems}\n                </TransitionGroup>\n            </div>\n        )\n    }\n}\n\nexport default List","import React, { Component } from \"react\"\nimport Transition from 'react-transition-group/Transition'\n\nimport \"./App.css\";\nimport Modal from \"./components/Modal/Modal\";\nimport Backdrop from \"./components/Backdrop/Backdrop\";\nimport List from \"./components/List/List\";\n\nclass App extends Component {\n\n  state = {\n\n    modalIsOpen: false,\n    showBlock: false\n\n  }\n\n  showModal = () => {\n    this.setState({ modalIsOpen: true })\n  }\n\n  closeModal = () => {\n    this.setState({ modalIsOpen: false })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React Animations</h1>\n        <button\n          className='Button'\n          onClick={() =>\n          this.setState(prevState => ({ showBlock: !prevState.showBlock }) )}\n        >\n          Toggle\n        </button>\n        <br />\n\n          <Transition\n            in={this.state.showBlock}\n            timeout={1000}\n            mountOnEnter\n            unmountOnExit\n            onEnter={() => console.log('onEnter')}\n            onEntering={() => console.log('onEntering')}\n            onEntered={() => console.log('onEntered')}\n            onExit={() => console.log('onExit')}\n            onExiting={() => console.log('onExiting')}\n            onExited={() => console.log('onExited')}\n            >\n            { state => (\n              <div\n                style = {{\n                    backgroundColor: 'red',\n                    width: 100,\n                    height: 100,\n                    margin: 'auto',\n                    transition: 'opacity 1s ease-out',\n                    opactiy: state === 'exiting' ? 0 : 1\n                }}\n              />\n            )}\n          </Transition>\n          \n        <Modal show={this.state.modalIsOpen} closed={this.closeModal} /> \n        { this.state.modalIsOpen ? <Backdrop /> : null }\n        <button className=\"Button\" onClick={this.showModal}>Open Modal</button>\n        <h3>Animating Lists</h3>\n        <List />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}